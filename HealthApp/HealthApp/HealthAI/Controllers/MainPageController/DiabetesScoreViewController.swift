//
//  DiabetesScoreViewController.swift
//  HealthAI
//
//  Created by Naresh Kumar on 31/10/18.
//  Copyright Â© 2018 Team9. All rights reserved.
//

import UIKit
import SwiftCharts
import PDFGenerator

private enum MyExampleModelDataType {
    case type0, type1, type2, type3
}

private enum Shape {
    case triangle, square, circle, cross
}



class DiabetesScoreViewController: UIViewController {
    
    fileprivate var chart: Chart?
    
    @IBOutlet weak var scorePercent: UILabel!
    
    //
//    @IBOutlet weak var scoreView: UIView!
//
//    @IBOutlet weak var scorePercent: UILabel!
    
    var scoreValue:Int = 0
    var ageValue:Int = 0
    var glucoseValue:Int = 0
    
    
    let shapeLayer = CAShapeLayer()
    let trackLayer = CAShapeLayer()
    
    @IBOutlet weak var graphAndWithInScroll: UIView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        scorePercent.text = "\(scoreValue) %"
        
        
        let center = CGPoint(x: graphAndWithInScroll.bounds.width/2, y: graphAndWithInScroll.bounds.height/3)
        
        let circularPath = UIBezierPath(arcCenter: center, radius: 50, startAngle: -CGFloat.pi / 2, endAngle: 2 * CGFloat.pi, clockwise: true)
        
        let scoreCircularPath = UIBezierPath(arcCenter: center, radius: 50, startAngle: -CGFloat.pi / 2, endAngle: (((2 * CGFloat.pi)/100) * CGFloat(scoreValue)) - (CGFloat.pi / 2) , clockwise: true)
        
        trackLayer.path = circularPath.cgPath
        trackLayer.strokeColor = UIColor.black.cgColor
        trackLayer.lineWidth = 20
        trackLayer.fillColor = UIColor.clear.cgColor
        trackLayer.lineCap = CAShapeLayerLineCap.round
        graphAndWithInScroll.layer.addSublayer(trackLayer)
        
        
        shapeLayer.path = scoreCircularPath.cgPath
        shapeLayer.strokeColor = UIColor.red.cgColor
        shapeLayer.lineWidth = 20
        shapeLayer.fillColor = UIColor.clear.cgColor
        shapeLayer.lineCap = CAShapeLayerLineCap.round
        shapeLayer.strokeEnd = 0
        graphAndWithInScroll.layer.addSublayer(shapeLayer)
        scoreAnimation()
        
        
        
        let lbl = UILabel(frame: CGRect(x: graphAndWithInScroll.frame.width/4, y: 320, width: 230, height: 30))
        lbl.textAlignment = .center //For center alignment
        lbl.text = "Your Position"
        lbl.textColor = .black
        lbl.font = UIFont.systemFont(ofSize: 20)
        graphAndWithInScroll.addSubview(lbl)
        
        let labelSettings = ChartLabelSettings(font: ExamplesDefaults.labelFont)
        
        let models: [(x: Double, y: Double, type: MyExampleModelDataType)] = [(138, 47, .type1), (84, 23, .type1), (145, 31, .type1), (135, 24, .type1), (139, 21, .type1), (173, 58, .type1), (99, 28, .type1), (194, 67, .type1), (83, 24, .type1), (89, 42, .type1), (99, 33, .type1), (125, 45, .type1), (80, 22, .type1), (166, 66, .type1), (110, 30, .type1), (81, 25, .type1), (195, 55, .type1), (154, 39, .type1), (117, 21, .type1), (84, 28, .type1), (0, 41, .type1), (94, 41, .type1), (96, 40, .type1), (75, 38, .type1), (180, 35, .type1), (130, 21, .type1), (84, 21, .type1), (120, 64, .type1), (84, 46, .type1), (139, 21, .type1), (91, 58, .type1), (91, 22, .type1), (99, 24, .type1), (163, 28, .type1), (122, 45, .type1), (103, 33, .type1), (138, 35, .type1), (102, 46, .type1), (90, 27, .type1), (111, 56, .type1), (180, 26, .type1), (133, 37, .type1), (106, 48, .type1), (171, 54, .type1), (159, 40, .type1), (180, 25, .type1), (146, 29, .type1), (71, 22, .type1), (103, 31, .type1), (105, 24, .type1), (103, 22, .type1), (101, 26, .type1), (88, 30, .type1), (176, 58, .type1), (150, 42, .type1), (73, 21, .type1), (187, 41, .type1), (100, 31, .type1), (146, 44, .type1), (105, 22, .type1), (84, 21, .type1), (133, 39, .type1), (44, 36, .type1), (141, 24, .type1), (114, 42, .type1), (99, 32, .type1), (109, 38, .type1), (109, 54, .type1), (95, 25, .type1), (146, 27, .type1), (100, 28, .type1), (139, 26, .type1), (126, 42, .type1), (129, 23, .type1), (79, 22, .type1), (0, 22, .type1), (62, 41, .type1), (95, 27, .type1), (131, 26, .type1), (112, 24, .type1), (113, 22, .type1), (74, 22, .type1), (83, 36, .type1), (101, 22, .type1), (137, 37, .type1), (110, 27, .type1), (106, 45, .type1), (100, 26, .type1), (136, 43, .type1), (107, 24, .type1), (80, 21, .type1), (123, 34, .type1), (81, 42, .type1), (134, 60, .type1), (142, 21, .type1), (144, 40, .type1), (92, 24, .type1), (71, 22, .type1), (93, 23, .type1), (122, 31, .type1), (163, 33, .type1), (151, 22, .type1), (125, 21, .type1), (81, 24, .type1), (85, 27, .type1), (126, 21, .type1), (96, 27, .type1), (144, 37, .type1), (83, 25, .type1), (95, 24, .type1), (171, 24, .type1), (155, 46, .type1), (89, 23, .type1), (76, 25, .type1), (160, 39, .type1), (146, 61, .type1), (124, 38, .type1), (78, 25, .type1), (97, 22, .type1), (99, 21, .type1), (162, 25, .type1), (111, 24, .type1), (107, 23, .type1), (132, 69, .type1), (113, 23, .type1), (88, 26, .type1), (120, 30, .type1), (118, 23, .type1), (117, 40, .type1), (105, 62, .type1), (173, 33, .type1), (122, 33, .type1), (170, 30, .type1), (84, 39, .type1), (96, 26, .type1), (125, 31, .type1), (100, 21, .type1), (93, 22, .type1), (129, 29, .type1), (105, 28, .type1), (128, 55, .type1), (106, 38, .type1), (108, 22, .type1), (108, 42, .type1), (154, 23, .type1), (102, 21, .type1), (57, 41, .type1), (106, 34, .type1), (147, 65, .type1), (90, 22, .type1), (136, 24, .type1), (114, 37, .type1), (156, 42, .type1), (153, 23, .type1), (188, 43, .type1), (152, 36, .type1), (99, 21, .type1), (109, 23, .type1), (88, 22, .type1), (163, 47, .type1), (151, 36, .type1), (102, 45, .type1), (114, 27, .type1), (100, 21, .type1), (131, 32, .type1), (104, 41, .type1), (148, 22, .type1), (120, 34, .type1), (110, 29, .type1), (111, 29, .type1), (102, 36, .type1), (134, 29, .type1), (87, 25, .type1), (79, 23, .type1), (75, 33, .type1), (179, 36, .type1), (85, 42, .type1), (129, 26, .type1), (143, 47, .type1), (130, 37, .type1), (87, 32, .type1), (119, 23, .type1), (0, 21, .type1), (73, 27, .type1), (141, 40, .type1), (194, 41, .type1), (181, 60, .type1), (128, 33, .type1), (109, 31, .type1), (139, 25, .type1), (111, 21, .type1), (123, 40, .type1), (159, 36, .type1), (135, 40, .type1), (85, 42, .type1), (158, 29, .type1), (105, 21, .type1), (107, 23, .type1), (109, 26, .type1), (148, 29, .type1), (113, 21, .type1), (138, 28, .type1), (108, 32, .type1), (99, 27, .type1), (103, 55, .type1), (111, 27, .type1), (196, 57, .type1), (162, 52, .type1), (96, 21, .type1), (184, 41, .type1), (81, 25, .type1), (147, 24, .type1), (179, 60, .type1), (140, 24, .type1), (112, 36, .type1), (151, 38, .type1), (109, 25, .type1), (125, 32, .type1), (85, 32, .type1), (112, 41, .type1), (177, 21, .type1), (158, 66, .type1), (119, 37, .type1), (142, 61, .type1), (100, 26, .type1), (87, 22, .type1), (101, 26, .type1), (162, 24, .type1), (197, 31, .type1), (117, 24, .type1), (142, 22, .type1), (134, 46, .type1), (79, 22, .type1), (122, 29, .type1), (74, 23, .type1), (171, 26, .type1), (181, 51, .type1), (179, 23, .type1), (164, 32, .type1), (104, 27, .type1), (91, 21, .type1), (91, 22, .type1), (139, 22, .type1), (119, 33, .type1), (146, 29, .type1), (184, 49, .type1), (122, 41, .type1), (165, 23, .type1), (124, 34, .type1), (111, 23, .type1), (106, 42, .type1), (129, 27, .type1), (90, 24, .type1), (86, 25, .type1), (92, 44, .type1), (113, 21, .type1), (111, 30, .type1), (114, 25, .type1), (193, 24, .type1), (155, 51, .type1), (191, 34, .type1), (141, 27, .type1), (95, 24, .type1), (142, 63, .type1), (123, 35, .type1), (96, 43, .type1), (138, 25, .type1), (128, 24, .type1), (102, 21, .type1), (146, 28, .type1), (101, 38, .type1), (108, 21, .type1), (122, 40, .type1), (71, 21, .type1), (106, 52, .type1), (100, 25, .type1), (106, 29, .type1), (104, 23, .type1), (114, 57, .type1), (108, 22, .type1), (146, 28, .type1), (129, 39, .type1), (133, 37, .type1), (161, 47, .type1), (108, 52, .type1), (136, 51, .type1), (155, 34, .type1), (119, 29, .type1), (96, 26, .type1), (108, 33, .type1), (78, 21, .type1), (107, 25, .type1), (128, 31, .type1), (128, 24, .type1), (161, 65, .type1), (151, 28, .type1), (146, 29, .type1), (126, 24, .type1), (100, 46, .type1), (112, 58, .type1), (167, 30, .type1), (144, 25, .type1), (77, 35, .type1), (115, 28, .type1), (150, 37, .type1), (120, 29, .type1), (161, 47, .type1), (137, 21, .type1), (128, 25, .type1), (124, 30, .type1), (80, 41, .type1), (106, 22, .type1), (155, 27, .type1), (113, 25, .type1), (109, 43, .type1), (112, 26, .type1), (99, 30, .type1), (182, 29, .type1), (115, 28, .type1), (194, 59, .type1), (129, 31, .type1), (112, 25, .type1), (124, 36, .type1), (152, 43, .type1), (112, 21, .type1), (157, 24, .type1), (122, 30, .type1), (179, 37, .type1), (102, 23, .type1), (105, 37, .type1), (118, 46, .type1), (87, 25, .type1), (180, 41, .type1), (106, 44, .type1), (95, 22, .type1), (165, 26, .type1), (117, 44, .type1), (115, 44, .type1), (152, 33, .type1), (178, 41, .type1), (130, 22, .type1), (95, 36, .type1), (0, 22, .type1), (122, 33, .type1), (95, 57, .type1), (126, 49, .type1), (139, 22, .type1), (116, 23, .type1), (99, 26, .type1), (0, 37, .type1), (92, 29, .type1), (137, 30, .type1), (61, 46, .type1), (90, 24, .type1), (90, 21, .type1), (165, 49, .type1), (125, 28, .type1), (129, 44, .type1), (88, 48, .type1), (196, 29, .type1), (189, 29, .type1), (158, 63, .type1), (103, 65, .type1), (146, 67, .type1), (147, 30, .type1), (99, 30, .type1), (124, 29, .type1), (101, 21, .type1), (81, 22, .type1), (133, 45, .type1), (173, 25, .type1), (118, 21, .type1), (84, 21, .type1), (105, 25, .type1), (122, 28, .type1), (140, 58, .type1), (98, 22, .type1), (87, 22, .type1), (156, 32, .type1), (93, 35, .type1), (107, 24, .type1), (105, 22, .type1), (109, 21, .type1), (90, 25, .type1), (125, 25, .type1), (119, 24, .type1), (116, 35, .type1), (105, 45, .type1), (144, 58, .type1), (100, 28, .type1), (100, 42, .type1), (166, 27, .type1), (131, 21, .type1), (116, 37, .type1), (158, 31, .type1), (127, 25, .type1), (96, 39, .type1), (131, 22, .type1), (82, 25, .type1), (193, 25, .type1), (95, 31, .type1), (137, 55, .type1), (136, 35, .type1), (72, 38, .type1), (168, 41, .type1), (123, 26, .type1), (115, 46, .type1), (101, 25, .type1), (197, 39, .type1), (172, 28, .type1), (102, 28, .type1), (112, 25, .type1), (143, 22, .type1), (143, 21, .type1), (138, 21, .type1), (173, 22, .type1), (97, 22, .type1), (144, 37, .type1), (83, 27, .type1), (129, 28, .type1), (119, 26, .type1), (94, 21, .type1), (102, 21, .type1), (115, 21, .type1), (151, 36, .type1), (184, 31, .type1), (94, 25, .type1), (181, 38, .type1), (135, 26, .type1), (95, 43, .type1), (99, 23, .type1), (89, 38, .type1), (80, 22, .type1), (139, 29, .type1), (90, 36, .type1), (141, 29, .type1), (140, 41, .type1), (147, 28, .type1), (97, 21, .type1), (107, 31, .type1), (189, 41, .type1), (83, 22, .type1), (117, 24, .type1), (108, 33, .type1), (117, 30, .type1), (180, 25, .type1), (100, 28, .type1), (95, 26, .type1), (104, 22, .type1), (120, 26, .type1), (82, 23, .type1), (134, 23, .type1), (91, 25, .type1), (119, 72, .type1), (100, 24, .type1), (175, 38, .type1), (135, 62, .type1), (86, 24, .type1), (148, 51, .type1), (134, 81, .type1), (120, 48, .type1), (71, 26, .type1), (74, 39, .type1), (88, 37, .type1), (115, 34, .type1), (124, 21, .type1), (74, 22, .type1), (97, 25, .type1), (120, 38, .type1), (154, 27, .type1), (144, 28, .type1), (137, 22, .type1), (119, 22, .type1), (136, 50, .type1), (114, 24, .type1), (137, 59, .type1), (105, 29, .type1), (114, 31, .type1), (126, 39, .type1), (132, 63, .type1), (158, 35, .type1), (123, 29, .type1), (85, 28, .type1), (84, 23, .type1), (145, 31, .type1), (135, 24, .type1), (139, 21, .type1), (173, 58, .type1), (99, 28, .type1), (194, 67, .type1), (83, 24, .type1), (89, 42, .type1), (99, 33, .type1), (125, 45, .type1), (80, 22, .type1), (166, 66, .type1), (110, 30, .type1), (81, 25, .type1), (195, 55, .type1), (154, 39, .type1), (117, 21, .type1), (84, 28, .type1), (0, 41, .type1), (94, 41, .type1), (96, 40, .type1), (75, 38, .type1), (180, 35, .type1), (130, 21, .type1), (84, 21, .type1), (120, 64, .type1), (84, 46, .type1), (139, 21, .type1), (91, 58, .type1), (91, 22, .type1), (99, 24, .type1), (163, 28, .type1), (145, 53, .type1), (125, 51, .type1), (76, 41, .type1), (129, 60, .type1), (68, 25, .type1), (124, 26, .type1), (114, 26, .type1), (130, 45, .type1), (125, 24, .type1), (87, 21, .type1), (97, 21, .type1), (116, 24, .type1), (117, 22, .type1), (111, 31, .type1), (122, 22, .type1), (107, 24, .type1), (86, 29, .type1), (91, 31, .type1), (77, 24, .type1), (132, 23, .type1), (105, 46, .type1), (57, 67, .type1), (127, 23, .type1), (129, 32, .type1), (100, 43, .type1), (128, 27, .type1), (90, 56, .type1), (84, 25, .type1), (88, 29, .type1), (186, 37, .type1), (187, 53, .type1), (131, 28, .type1), (164, 50, .type1), (189, 37, .type1), (116, 21, .type1), (84, 25, .type1), (114, 66, .type1), (88, 23, .type1), (84, 28, .type1), (124, 37, .type1), (97, 30, .type1), (110, 58, .type1), (103, 42, .type1), (85, 35, .type1), (125, 54, .type1), (198, 28, .type1), (87, 24, .type1), (99, 32, .type1), (91, 27, .type1), (95, 22, .type1), (99, 21, .type1), (92, 46, .type1), (154, 37, .type1), (121, 33, .type1), (78, 39, .type1), (130, 21, .type1), (111, 22, .type1), (98, 22, .type1), (143, 23, .type1), (119, 25, .type1), (108, 35, .type1), (118, 21, .type1), (133, 36, .type1), (197, 62, .type1), (151, 21, .type1), (109, 27, .type1), (121, 62, .type1), (100, 42, .type1), (124, 52, .type1), (93, 22, .type1), (143, 41, .type1), (103, 29, .type1), (176, 52, .type1), (73, 25, .type1), (111, 45, .type1), (112, 24, .type1), (132, 44, .type1), (82, 25, .type1), (123, 34, .type1), (188, 22, .type1), (67, 46, .type1), (89, 21, .type1), (173, 38, .type1), (109, 26, .type1), (108, 24, .type1), (96, 28, .type1), (124, 30, .type1), (150, 54, .type1), (183, 36, .type1), (124, 21, .type1), (181, 22, .type1), (92, 25, .type1), (152, 27, .type1), (111, 23, .type1), (106, 24, .type1), (174, 36, .type1), (168, 40, .type1), (105, 26, .type1), (138, 50, .type1), (106, 27, .type1), (117, 30, .type1), (68, 23, .type1), (112, 50, .type1), (119, 24, .type1), (112, 28, .type1), (92, 28, .type1), (183, 45, .type1), (94, 21, .type1), (108, 21, .type1), (90, 29, .type1), (125, 21, .type1), (132, 21, .type1), (128, 45, .type1), (94, 21, .type1), (114, 34, .type1), (102, 24, .type1), (111, 23, .type1), (128, 22, .type1), (92, 31, .type1), (104, 38, .type1), (104, 48, .type1), (94, 23, .type1), (97, 32, .type1), (100, 28, .type1), (102, 27, .type1), (128, 24, .type1), (147, 50, .type1), (90, 31, .type1), (103, 27, .type1), (157, 30, .type1), (167, 33, .type1), (179, 22, .type1), (136, 42, .type1), (107, 23, .type1), (91, 23, .type1), (117, 27, .type1), (123, 28, .type1), (120, 27, .type1), (106, 22, .type1), (155, 25, .type1), (101, 22, .type1), (120, 41, .type1), (127, 51, .type1), (80, 27, .type1), (162, 54, .type1), (199, 22, .type1), (167, 43, .type1), (145, 40, .type1), (115, 40, .type1), (112, 24, .type1), (145, 70, .type1), (111, 40, .type1), (98, 43, .type1), (154, 45, .type1), (165, 49, .type1), (99, 21, .type1), (68, 47, .type1), (123, 22, .type1), (91, 68, .type1), (195, 31, .type1), (156, 53, .type1), (93, 25, .type1), (121, 25, .type1), (101, 23, .type1), (56, 22, .type1), (162, 26, .type1), (95, 22, .type1), (125, 27, .type1), (136, 69, .type1), (129, 25, .type1), (130, 22, .type1), (107, 29, .type1), (140, 23, .type1), (144, 46, .type1), (107, 34, .type1), (158, 44, .type1), (121, 23, .type1), (129, 43, .type1), (90, 25, .type1), (142, 43, .type1), (169, 31, .type1), (99, 22, .type1), (127, 28, .type1), (118, 26, .type1), (122, 26, .type1), (125, 49, .type1), (168, 52, .type1), (129, 41, .type1), (110, 27, .type1), (80, 28, .type1), (115, 30, .type1), (127, 22, .type1), (164, 45, .type1), (93, 23, .type1), (158, 24, .type1), (126, 40, .type1), (129, 38, .type1), (134, 21, .type1), (102, 32, .type1), (187, 34, .type1), (173, 31, .type1), (94, 56, .type1), (108, 24, .type1), (97, 52, .type1), (83, 34, .type1), (114, 21, .type1), (149, 42, .type1), (117, 42, .type1), (111, 45, .type1), (112, 38, .type1), (116, 25, .type1), (141, 22, .type1), (175, 22, .type1), (92, 22, .type1), (130, 34, .type1), (120, 22, .type1), (174, 24, .type1), (106, 22, .type1), (105, 53, .type1), (95, 28, .type1), (126, 21, .type1), (65, 42, .type1), (99, 21, .type1), (102, 42, .type1), (120, 48, .type1), (102, 26, .type1), (109, 22, .type1), (140, 45, .type1), (153, 39, .type1), (100, 46, .type1), (147, 27, .type1), (81, 32, .type1), (187, 36, .type1), (162, 50, .type1), (136, 22, .type1), (121, 28, .type1), (108, 25, .type1), (181, 26, .type1), (154, 45, .type1), (128, 37, .type1), (137, 39, .type1), (123, 52, .type1), (106, 26, .type1), (190, 66, .type1), (88, 22, .type1), (170, 43, .type1), (89, 33, .type1), (101, 63, .type1), (122, 27, .type1), (121, 30, .type1), (126, 47, .type1), (93, 23, .type1), (100, 46, .type1), (112, 58, .type1), (167, 30, .type1), (144, 25, .type1), (77, 35, .type1), (115, 28, .type1), (150, 37, .type1), (120, 29, .type1), (161, 47, .type1), (137, 21, .type1), (128, 25, .type1), (124, 30, .type1), (80, 41, .type1), (106, 22, .type1), (155, 27, .type1), (113, 25, .type1), (109, 43, .type1), (112, 26, .type1), (99, 30, .type1), (182, 29, .type1), (115, 28, .type1), (194, 59, .type1), (129, 31, .type1), (112, 25, .type1), (124, 36, .type1), (152, 43, .type1), (112, 21, .type1), (157, 24, .type1), (122, 30, .type1), (179, 37, .type1), (102, 23, .type1), (105, 37, .type1), (118, 46, .type1), (87, 25, .type1), (180, 41, .type1), (106, 44, .type1), (95, 22, .type1), (165, 26, .type1), (117, 44, .type1), (115, 44, .type1), (152, 33, .type1), (178, 41, .type1), (130, 22, .type1), (95, 36, .type1), (0, 22, .type1), (122, 33, .type1), (95, 57, .type1), (126, 49, .type1), (139, 22, .type1), (116, 23, .type1), (99, 26, .type1), (0, 37, .type1), (92, 29, .type1), (137, 30, .type1), (61, 46, .type1), (90, 24, .type1), (90, 21, .type1), (165, 49, .type1), (125, 28, .type1), (129, 44, .type1), (88, 48, .type1), (196, 29, .type1), (189, 29, .type1), (158, 63, .type1), (103, 65, .type1), (146, 67, .type1), (147, 30, .type1), (99, 30, .type1), (124, 29, .type1), (101, 21, .type1), (81, 22, .type1), (133, 45, .type1), (173, 25, .type1), (118, 21, .type1), (84, 21, .type1), (105, 25, .type1), (122, 28, .type1), (140, 58, .type1), (98, 22, .type1), (87, 22, .type1), (156, 32, .type1), (93, 35, .type1), (107, 24, .type1), (105, 22, .type1), (109, 21, .type1), (90, 25, .type1), (125, 25, .type1), (119, 24, .type1), (116, 35, .type1), (105, 45, .type1), (144, 58, .type1), (100, 28, .type1), (100, 42, .type1), (166, 27, .type1), (131, 21, .type1), (116, 37, .type1), (158, 31, .type1), (127, 25, .type1), (96, 39, .type1), (131, 22, .type1), (82, 25, .type1), (193, 25, .type1), (95, 31, .type1), (137, 55, .type1), (136, 35, .type1), (72, 38, .type1), (168, 41, .type1), (123, 26, .type1), (115, 46, .type1), (101, 25, .type1), (197, 39, .type1), (172, 28, .type1), (102, 28, .type1), (112, 25, .type1), (143, 22, .type1), (143, 21, .type1), (138, 21, .type1), (173, 22, .type1), (97, 22, .type1), (144, 37, .type1), (83, 27, .type1), (129, 28, .type1), (119, 26, .type1), (94, 21, .type1), (102, 21, .type1), (115, 21, .type1), (151, 36, .type1), (184, 31, .type1), (94, 25, .type1), (181, 38, .type1), (135, 26, .type1), (95, 43, .type1), (99, 23, .type1), (89, 38, .type1), (80, 22, .type1), (139, 29, .type1), (90, 36, .type1), (141, 29, .type1), (140, 41, .type1), (147, 28, .type1), (97, 21, .type1), (107, 31, .type1), (189, 41, .type1), (83, 22, .type1), (117, 24, .type1), (108, 33, .type1), (117, 30, .type1), (180, 25, .type1), (100, 28, .type1), (95, 26, .type1), (104, 22, .type1), (120, 26, .type1), (82, 23, .type1), (134, 23, .type1), (91, 25, .type1), (119, 72, .type1), (100, 24, .type1), (175, 38, .type1), (135, 62, .type1), (86, 24, .type1), (148, 51, .type1), (134, 81, .type1), (120, 48, .type1), (71, 26, .type1), (74, 39, .type1), (88, 37, .type1), (115, 34, .type1), (124, 21, .type1), (74, 22, .type1), (97, 25, .type1), (120, 38, .type1), (154, 27, .type1), (144, 28, .type1), (137, 22, .type1), (119, 22, .type1), (136, 50, .type1), (114, 24, .type1), (137, 59, .type1), (105, 29, .type1), (114, 31, .type1), (126, 39, .type1), (132, 63, .type1), (158, 35, .type1), (123, 29, .type1), (85, 28, .type1), (84, 23, .type1), (145, 31, .type1), (135, 24, .type1), (139, 21, .type1), (173, 58, .type1), (99, 28, .type1), (194, 67, .type1), (83, 24, .type1), (89, 42, .type1), (99, 33, .type1), (125, 45, .type1), (80, 22, .type1), (166, 66, .type1), (110, 30, .type1), (81, 25, .type1), (195, 55, .type1), (154, 39, .type1), (117, 21, .type1), (84, 28, .type1), (0, 41, .type1), (94, 41, .type1), (96, 40, .type1), (75, 38, .type1), (180, 35, .type1), (130, 21, .type1), (84, 21, .type1), (120, 64, .type1), (84, 46, .type1), (139, 21, .type1), (91, 58, .type1), (91, 22, .type1), (99, 24, .type1), (163, 28, .type1), (145, 53, .type1), (122, 22, .type1), (107, 24, .type1), (86, 29, .type1), (91, 31, .type1), (77, 24, .type1), (132, 23, .type1), (105, 46, .type1), (57, 67, .type1), (127, 23, .type1), (129, 32, .type1), (100, 43, .type1), (128, 27, .type1), (90, 56, .type1), (84, 25, .type1), (88, 29, .type1), (186, 37, .type1), (187, 53, .type1), (131, 28, .type1), (164, 50, .type1), (189, 37, .type1), (116, 21, .type1), (84, 25, .type1), (114, 66, .type1), (88, 23, .type1), (84, 28, .type1), (124, 37, .type1), (97, 30, .type1), (110, 58, .type1), (103, 42, .type1), (85, 35, .type1), (125, 54, .type1), (198, 28, .type1), (87, 24, .type1), (99, 32, .type1), (91, 27, .type1), (95, 22, .type1), (99, 21, .type1), (92, 46, .type1), (154, 37, .type1), (121, 33, .type1), (78, 39, .type1), (130, 21, .type1), (111, 22, .type1), (98, 22, .type1), (143, 23, .type1), (119, 25, .type1), (108, 35, .type1), (118, 21, .type1), (133, 36, .type1), (197, 62, .type1), (151, 21, .type1), (109, 27, .type1), (121, 62, .type1), (100, 42, .type1), (124, 52, .type1), (93, 22, .type1), (143, 41, .type1), (103, 29, .type1), (176, 52, .type1), (73, 25, .type1), (111, 45, .type1), (112, 24, .type1), (132, 44, .type1), (82, 25, .type1), (123, 34, .type1), (188, 22, .type1), (67, 46, .type1), (89, 21, .type1), (173, 38, .type1), (109, 26, .type1), (108, 24, .type1), (96, 28, .type1), (124, 30, .type1), (150, 54, .type1), (183, 36, .type1), (124, 21, .type1), (181, 22, .type1), (92, 25, .type1), (152, 27, .type1), (111, 23, .type1), (106, 24, .type1), (174, 36, .type1), (168, 40, .type1), (105, 26, .type1), (138, 50, .type1), (106, 27, .type1), (117, 30, .type1), (68, 23, .type1), (112, 50, .type1), (119, 24, .type1), (112, 28, .type1), (92, 28, .type1), (183, 45, .type1), (94, 21, .type1), (108, 21, .type1), (90, 29, .type1), (125, 21, .type1), (132, 21, .type1), (128, 45, .type1), (94, 21, .type1), (114, 34, .type1), (102, 24, .type1), (111, 23, .type1), (128, 22, .type1), (92, 31, .type1), (104, 38, .type1), (104, 48, .type1), (94, 23, .type1), (97, 32, .type1), (100, 28, .type1), (102, 27, .type1), (128, 24, .type1), (147, 50, .type1), (90, 31, .type1), (103, 27, .type1), (157, 30, .type1), (167, 33, .type1), (179, 22, .type1), (136, 42, .type1), (107, 23, .type1), (91, 23, .type1), (117, 27, .type1), (123, 28, .type1), (120, 27, .type1), (106, 22, .type1), (155, 25, .type1), (101, 22, .type1), (120, 41, .type1), (127, 51, .type1), (80, 27, .type1), (162, 54, .type1), (199, 22, .type1), (167, 43, .type1), (145, 40, .type1), (115, 40, .type1), (112, 24, .type1), (145, 70, .type1), (111, 40, .type1), (98, 43, .type1), (154, 45, .type1), (165, 49, .type1), (99, 21, .type1), (68, 47, .type1), (123, 22, .type1), (91, 68, .type1), (195, 31, .type1), (156, 53, .type1), (93, 25, .type1), (121, 25, .type1), (101, 23, .type1), (56, 22, .type1), (162, 26, .type1), (95, 22, .type1), (125, 27, .type1), (136, 69, .type1), (129, 25, .type1), (130, 22, .type1), (107, 29, .type1), (140, 23, .type1), (144, 46, .type1), (107, 34, .type1), (158, 44, .type1), (121, 23, .type1), (129, 43, .type1), (90, 25, .type1), (142, 43, .type1), (169, 31, .type1), (99, 22, .type1), (127, 28, .type1), (118, 26, .type1), (122, 26, .type1), (125, 49, .type1), (168, 52, .type1), (129, 41, .type1), (110, 27, .type1), (80, 28, .type1), (115, 30, .type1), (127, 22, .type1), (164, 45, .type1), (93, 23, .type1), (158, 24, .type1), (126, 40, .type1), (129, 38, .type1), (134, 21, .type1), (102, 32, .type1), (187, 34, .type1), (173, 31, .type1), (94, 56, .type1), (108, 24, .type1), (97, 52, .type1), (83, 34, .type1), (114, 21, .type1), (149, 42, .type1), (117, 42, .type1), (111, 45, .type1), (112, 38, .type1), (116, 25, .type1), (141, 22, .type1), (175, 22, .type1), (92, 22, .type1), (130, 34, .type1), (120, 22, .type1), (174, 24, .type1), (106, 22, .type1), (105, 53, .type1), (95, 28, .type1), (126, 21, .type1), (65, 42, .type1), (99, 21, .type1), (102, 42, .type1), (120, 48, .type1), (102, 26, .type1), (109, 22, .type1), (140, 45, .type1), (153, 39, .type1), (100, 46, .type1), (147, 27, .type1), (81, 32, .type1), (187, 36, .type1), (162, 50, .type1), (136, 22, .type1), (121, 28, .type1), (108, 25, .type1), (181, 26, .type1), (154, 45, .type1), (128, 37, .type1), (137, 39, .type1), (123, 52, .type1), (106, 26, .type1), (190, 66, .type1), (88, 22, .type1), (170, 43, .type1), (89, 33, .type1), (101, 63, .type1), (122, 27, .type1), (121, 30, .type1), (126, 47, .type1), (93, 23, .type1), (100, 46, .type1), (112, 58, .type1), (167, 30, .type1), (144, 25, .type1), (77, 35, .type1), (115, 28, .type1), (150, 37, .type1), (120, 29, .type1), (161, 47, .type1), (137, 21, .type1), (128, 25, .type1), (124, 30, .type1), (80, 41, .type1), (106, 22, .type1), (155, 27, .type1), (113, 25, .type1), (109, 43, .type1), (112, 26, .type1), (99, 30, .type1), (182, 29, .type1), (115, 28, .type1), (194, 59, .type1), (129, 31, .type1), (112, 25, .type1), (124, 36, .type1), (152, 43, .type1), (112, 21, .type1), (157, 24, .type1), (122, 30, .type1), (179, 37, .type1), (102, 23, .type1), (93, 23, .type1), (122, 31, .type1), (163, 33, .type1), (151, 22, .type1), (125, 21, .type1), (81, 24, .type1), (85, 27, .type1), (126, 21, .type1), (96, 27, .type1), (144, 37, .type1), (83, 25, .type1), (95, 24, .type1), (171, 24, .type1), (155, 46, .type1), (89, 23, .type1), (76, 25, .type1), (160, 39, .type1), (146, 61, .type1), (124, 38, .type1), (78, 25, .type1), (97, 22, .type1), (99, 21, .type1), (162, 25, .type1), (111, 24, .type1), (107, 23, .type1), (132, 69, .type1), (113, 23, .type1), (88, 26, .type1), (120, 30, .type1), (118, 23, .type1), (117, 40, .type1), (105, 62, .type1), (173, 33, .type1), (122, 33, .type1), (170, 30, .type1), (84, 39, .type1), (96, 26, .type1), (125, 31, .type1), (100, 21, .type1), (93, 22, .type1), (129, 29, .type1), (105, 28, .type1), (128, 55, .type1), (106, 38, .type1), (108, 22, .type1), (108, 42, .type1), (154, 23, .type1), (102, 21, .type1), (57, 41, .type1), (106, 34, .type1), (147, 65, .type1), (90, 22, .type1), (136, 24, .type1), (114, 37, .type1), (156, 42, .type1), (153, 23, .type1), (188, 43, .type1), (152, 36, .type1), (99, 21, .type1), (109, 23, .type1), (88, 22, .type1), (163, 47, .type1), (151, 36, .type1), (102, 45, .type1), (114, 27, .type1), (100, 21, .type1), (131, 32, .type1), (104, 41, .type1), (148, 22, .type1), (120, 34, .type1), (110, 29, .type1), (111, 29, .type1), (102, 36, .type1), (134, 29, .type1), (87, 25, .type1), (79, 23, .type1), (75, 33, .type1), (179, 36, .type1), (85, 42, .type1), (129, 26, .type1), (143, 47, .type1), (130, 37, .type1), (87, 32, .type1), (119, 23, .type1), (0, 21, .type1), (73, 27, .type1), (141, 40, .type1), (194, 41, .type1), (181, 60, .type1), (128, 33, .type1), (109, 31, .type1), (139, 25, .type1), (111, 21, .type1), (123, 40, .type1), (159, 36, .type1), (135, 40, .type1), (85, 42, .type1), (158, 29, .type1), (105, 21, .type1), (107, 23, .type1), (109, 26, .type1), (148, 29, .type1), (113, 21, .type1), (138, 28, .type1), (108, 32, .type1), (99, 27, .type1), (103, 55, .type1), (111, 27, .type1), (196, 57, .type1), (162, 52, .type1), (96, 21, .type1), (184, 41, .type1), (81, 25, .type1), (147, 24, .type1), (179, 60, .type1), (140, 24, .type1), (112, 36, .type1), (151, 38, .type1), (109, 25, .type1), (125, 32, .type1), (85, 32, .type1), (112, 41, .type1), (177, 21, .type1), (158, 66, .type1), (119, 37, .type1), (142, 61, .type1), (100, 26, .type1), (87, 22, .type1), (101, 26, .type1), (162, 24, .type1), (197, 31, .type1), (117, 24, .type1), (142, 22, .type1), (134, 46, .type1), (79, 22, .type1), (122, 29, .type1), (74, 23, .type1), (171, 26, .type1), (181, 51, .type1), (179, 23, .type1), (164, 32, .type1), (104, 27, .type1), (91, 21, .type1), (91, 22, .type1), (139, 22, .type1), (119, 33, .type1), (146, 29, .type1), (184, 49, .type1), (122, 41, .type1), (165, 23, .type1), (124, 34, .type1), (111, 23, .type1), (106, 42, .type1), (129, 27, .type1), (90, 24, .type1), (86, 25, .type1), (92, 44, .type1), (113, 21, .type1), (111, 30, .type1), (114, 25, .type1), (193, 24, .type1), (155, 51, .type1), (191, 34, .type1), (141, 27, .type1), (95, 24, .type1), (142, 63, .type1), (123, 35, .type1), (96, 43, .type1), (138, 25, .type1), (128, 24, .type1), (102, 21, .type1), (146, 28, .type1), (101, 38, .type1), (108, 21, .type1), (122, 40, .type1), (71, 21, .type1), (106, 52, .type1), (100, 25, .type1), (106, 29, .type1), (104, 23, .type1), (114, 57, .type1), (108, 22, .type1), (146, 28, .type1), (129, 39, .type1), (133, 37, .type1), (161, 47, .type1), (108, 52, .type1), (136, 51, .type1), (155, 34, .type1), (119, 29, .type1), (96, 26, .type1), (108, 33, .type1), (78, 21, .type1), (107, 25, .type1), (128, 31, .type1), (128, 24, .type1), (161, 65, .type1), (151, 28, .type1), (146, 29, .type1), (126, 24, .type1), (100, 46, .type1), (82, 25, .type1), (193, 25, .type1), (95, 31, .type1), (137, 55, .type1), (136, 35, .type1), (72, 38, .type1), (168, 41, .type1), (123, 26, .type1), (115, 46, .type1), (101, 25, .type1), (197, 39, .type1), (172, 28, .type1), (102, 28, .type1), (112, 25, .type1), (143, 22, .type1), (143, 21, .type1), (138, 21, .type1), (173, 22, .type1), (97, 22, .type1), (144, 37, .type1), (83, 27, .type1), (129, 28, .type1), (119, 26, .type1), (94, 21, .type1), (102, 21, .type1), (115, 21, .type1), (151, 36, .type1), (184, 31, .type1), (94, 25, .type1), (181, 38, .type1), (135, 26, .type1), (95, 43, .type1), (99, 23, .type1), (89, 38, .type1), (80, 22, .type1), (139, 29, .type1), (90, 36, .type1), (141, 29, .type1), (140, 41, .type1), (147, 28, .type1), (97, 21, .type1), (107, 31, .type1), (189, 41, .type1), (83, 22, .type1), (117, 24, .type1), (108, 33, .type1), (117, 30, .type1), (180, 25, .type1), (100, 28, .type1), (95, 26, .type1), (104, 22, .type1), (120, 26, .type1), (82, 23, .type1), (134, 23, .type1), (91, 25, .type1), (119, 72, .type1), (100, 24, .type1), (175, 38, .type1), (135, 62, .type1), (86, 24, .type1), (148, 51, .type1), (134, 81, .type1), (120, 48, .type1), (71, 26, .type1), (74, 39, .type1), (88, 37, .type1), (115, 34, .type1), (124, 21, .type1), (74, 22, .type1), (97, 25, .type1), (120, 38, .type1), (154, 27, .type1), (144, 28, .type1), (137, 22, .type1), (119, 22, .type1), (136, 50, .type1), (114, 24, .type1), (137, 59, .type1), (105, 29, .type1), (114, 31, .type1), (126, 39, .type1), (132, 63, .type1), (158, 35, .type1), (123, 29, .type1), (85, 28, .type1), (84, 23, .type1), (145, 31, .type1), (135, 24, .type1), (139, 21, .type1), (173, 58, .type1), (99, 28, .type1), (194, 67, .type1), (83, 24, .type1), (89, 42, .type1), (99, 33, .type1), (125, 45, .type1), (80, 22, .type1), (166, 66, .type1), (110, 30, .type1), (81, 25, .type1), (195, 55, .type1), (154, 39, .type1), (136, 44, .type1), (126, 24, .type1), (116, 50, .type1), (142, 63, .type1), (183, 40, .type1), (100, 36, .type1), (163, 33, .type1), (139, 50, .type1), (167, 28, .type1), (162, 24, .type1), (173, 58, .type1), (99, 28, .type1), (194, 67, .type1), (83, 24, .type1), (89, 42, .type1), (99, 33, .type1), (125, 45, .type1), (80, 22, .type1), (166, 66, .type1), (110, 30, .type1), (81, 25, .type1), (195, 55, .type1), (154, 39, .type1), (136, 44, .type1), (126, 24, .type1), (116, 50, .type1), (142, 63, .type1), (183, 40, .type1), (100, 36, .type1), (163, 33, .type1), (139, 50, .type1), (167, 28, .type1), (162, 24, .type1), (178, 41, .type1), (130, 22, .type1), (95, 36, .type1), (0, 22, .type1), (122, 33, .type1), (95, 57, .type1), (126, 49, .type1), (139, 22, .type1), (116, 23, .type1), (99, 26, .type1), (0, 37, .type1), (92, 29, .type1), (137, 30, .type1), (61, 46, .type1), (90, 24, .type1), (90, 21, .type1), (165, 49, .type1), (125, 28, .type1), (129, 44, .type1), (88, 48, .type1), (196, 29, .type1), (189, 29, .type1), (158, 63, .type1), (103, 65, .type1), (146, 67, .type1), (147, 30, .type1), (99, 30, .type1), (124, 29, .type1), (101, 21, .type1), (81, 22, .type1), (133, 45, .type1), (173, 25, .type1), (118, 21, .type1), (84, 21, .type1), (105, 25, .type1), (122, 28, .type1), (140, 58, .type1), (98, 22, .type1), (87, 22, .type1), (156, 32, .type1), (93, 35, .type1), (107, 24, .type1), (105, 22, .type1), (109, 21, .type1), (90, 25, .type1), (125, 25, .type1), (119, 24, .type1), (116, 35, .type1), (105, 45, .type1), (144, 58, .type1), (100, 28, .type1), (100, 42, .type1), (166, 27, .type1), (131, 21, .type1), (116, 37, .type1), (158, 31, .type1), (127, 25, .type1), (96, 39, .type1), (131, 22, .type1), (82, 25, .type1), (193, 25, .type1), (95, 31, .type1), (137, 55, .type1), (136, 35, .type1), (72, 38, .type1), (168, 41, .type1), (123, 26, .type1), (115, 46, .type1), (101, 25, .type1), (197, 39, .type1), (172, 28, .type1), (102, 28, .type1), (112, 25, .type1), (143, 22, .type1), (143, 21, .type1), (138, 21, .type1), (173, 22, .type1), (97, 22, .type1), (144, 37, .type1), (83, 27, .type1), (129, 28, .type1), (119, 26, .type1), (94, 21, .type1), (102, 21, .type1), (115, 21, .type1), (151, 36, .type1), (184, 31, .type1), (94, 25, .type1), (181, 38, .type1), (135, 26, .type1), (95, 43, .type1), (99, 23, .type1), (89, 38, .type1), (80, 22, .type1), (173, 38, .type1), (109, 26, .type1), (108, 24, .type1), (96, 28, .type1), (124, 30, .type1), (150, 54, .type1), (183, 36, .type1), (124, 21, .type1), (181, 22, .type1), (92, 25, .type1), (152, 27, .type1), (111, 23, .type1), (106, 24, .type1), (174, 36, .type1), (168, 40, .type1), (105, 26, .type1), (138, 50, .type1), (106, 27, .type1), (117, 30, .type1), (68, 23, .type1), (112, 50, .type1), (119, 24, .type1), (112, 28, .type1), (92, 28, .type1), (183, 45, .type1), (94, 21, .type1), (108, 21, .type1), (90, 29, .type1), (125, 21, .type1), (132, 21, .type1), (128, 45, .type1), (94, 21, .type1), (114, 34, .type1), (102, 24, .type1), (111, 23, .type1), (128, 22, .type1), (92, 31, .type1), (104, 38, .type1), (104, 48, .type1), (94, 23, .type1), (97, 32, .type1), (100, 28, .type1), (102, 27, .type1), (128, 24, .type1), (147, 50, .type1), (90, 31, .type1), (103, 27, .type1), (157, 30, .type1), (167, 33, .type1), (179, 22, .type1), (136, 42, .type1), (107, 23, .type1), (91, 23, .type1), (117, 27, .type1), (123, 28, .type1), (120, 27, .type1), (106, 22, .type1), (155, 25, .type1), (101, 22, .type1), (120, 41, .type1), (127, 51, .type1), (80, 27, .type1), (162, 54, .type1), (199, 22, .type1), (167, 43, .type1), (145, 40, .type1), (115, 40, .type1), (112, 24, .type1), (145, 70, .type1), (111, 40, .type1), (98, 43, .type1), (154, 45, .type1), (165, 49, .type1), (99, 21, .type1), (68, 47, .type1), (123, 22, .type1), (91, 68, .type1), (195, 31, .type1), (156, 53, .type1), (93, 25, .type1), (121, 25, .type1), (101, 23, .type1), (56, 22, .type1), (162, 26, .type1), (95, 22, .type1), (125, 27, .type1), (136, 69, .type1), (129, 25, .type1), (130, 22, .type1), (107, 29, .type1), (140, 23, .type1), (144, 46, .type1), (107, 34, .type1), (158, 44, .type1), (121, 23, .type1), (129, 43, .type1), (90, 25, .type1), (142, 43, .type1), (169, 31, .type1), (99, 22, .type1), (127, 28, .type1), (118, 26, .type1), (122, 26, .type1), (125, 49, .type1), (168, 52, .type1), (129, 41, .type1), (110, 27, .type1), (80, 28, .type1), (115, 30, .type1), (127, 22, .type1), (164, 45, .type1), (93, 23, .type1), (158, 24, .type1), (126, 40, .type1), (129, 38, .type1), (134, 21, .type1), (102, 32, .type1), (187, 34, .type1), (173, 31, .type1), (94, 56, .type1), (108, 24, .type1), (97, 52, .type1), (83, 34, .type1), (114, 21, .type1), (149, 42, .type1), (117, 42, .type1), (111, 45, .type1), (112, 38, .type1), (116, 25, .type1), (141, 22, .type1), (175, 22, .type1), (92, 22, .type1), (130, 34, .type1), (120, 22, .type1), (174, 24, .type1), (106, 22, .type1), (105, 53, .type1), (95, 28, .type1), (126, 21, .type1), (65, 42, .type1), (99, 21, .type1), (102, 42, .type1), (120, 48, .type1), (102, 26, .type1), (109, 22, .type1), (140, 45, .type1), (153, 39, .type1), (100, 46, .type1), (147, 27, .type1), (81, 32, .type1), (187, 36, .type1), (162, 50, .type1), (136, 22, .type1), (121, 28, .type1), (108, 25, .type1), (181, 26, .type1), (154, 45, .type1), (128, 37, .type1), (137, 39, .type1), (123, 52, .type1), (106, 26, .type1), (190, 66, .type1), (88, 22, .type1), (170, 43, .type1), (89, 33, .type1), (101, 63, .type1), (122, 27, .type1), (121, 30, .type1), (126, 47, .type1), (122, 45, .type1), (103, 33, .type1), (138, 35, .type1), (102, 46, .type1), (90, 27, .type1), (111, 56, .type1), (180, 26, .type1), (133, 37, .type1), (106, 48, .type1), (171, 54, .type1), (159, 40, .type1), (180, 25, .type1), (146, 29, .type1), (71, 22, .type1), (103, 31, .type1), (105, 24, .type1), (103, 22, .type1), (101, 26, .type1), (88, 30, .type1), (176, 58, .type1), (150, 42, .type1), (73, 21, .type1), (187, 41, .type1), (100, 31, .type1), (146, 44, .type1), (105, 22, .type1), (84, 21, .type1), (133, 39, .type1), (44, 36, .type1), (141, 24, .type1), (114, 42, .type1), (99, 32, .type1), (109, 38, .type1), (109, 54, .type1), (95, 25, .type1), (146, 27, .type1), (100, 28, .type1), (139, 26, .type1), (126, 42, .type1), (129, 23, .type1), (79, 22, .type1), (0, 22, .type1), (62, 41, .type1), (95, 27, .type1), (131, 26, .type1), (112, 24, .type1), (113, 22, .type1), (74, 22, .type1), (83, 36, .type1), (101, 22, .type1), (137, 37, .type1), (110, 27, .type1), (106, 45, .type1), (100, 26, .type1), (136, 43, .type1), (107, 24, .type1), (80, 21, .type1), (123, 34, .type1), (81, 42, .type1), (134, 60, .type1), (142, 21, .type1), (144, 40, .type1), (92, 24, .type1), (71, 22, .type1), (93, 23, .type1), (122, 31, .type1), (163, 33, .type1), (151, 22, .type1), (125, 21, .type1), (81, 24, .type1), (85, 27, .type1), (126, 21, .type1), (96, 27, .type1), (144, 37, .type1), (83, 25, .type1), (95, 24, .type1), (171, 24, .type1), (155, 46, .type1), (89, 23, .type1), (76, 25, .type1), (160, 39, .type1), (146, 61, .type1), (124, 38, .type1), (78, 25, .type1), (97, 22, .type1), (99, 21, .type1), (162, 25, .type1), (111, 24, .type1), (107, 23, .type1), (132, 69, .type1), (113, 23, .type1), (88, 26, .type1), (120, 30, .type1), (118, 23, .type1), (117, 40, .type1), (105, 62, .type1), (173, 33, .type1), (122, 33, .type1), (170, 30, .type1), (84, 39, .type1), (96, 26, .type1), (125, 31, .type1), (100, 21, .type1), (93, 22, .type1), (129, 29, .type1), (105, 28, .type1), (128, 55, .type1), (106, 38, .type1), (108, 22, .type1), (108, 42, .type1), (154, 23, .type1), (102, 21, .type1), (57, 41, .type1), (106, 34, .type1), (147, 65, .type1), (90, 22, .type1), (136, 24, .type1), (114, 37, .type1), (156, 42, .type1), (153, 23, .type1), (188, 43, .type1), (152, 36, .type1), (99, 21, .type1), (109, 23, .type1), (88, 22, .type1), (163, 47, .type1), (151, 36, .type1), (102, 45, .type1), (114, 27, .type1), (100, 21, .type1), (131, 32, .type1), (104, 41, .type1), (148, 22, .type1), (120, 34, .type1), (110, 29, .type1), (111, 29, .type1), (102, 36, .type1), (134, 29, .type1), (87, 25, .type1), (79, 23, .type1), (75, 33, .type1), (179, 36, .type1), (85, 42, .type1), (129, 26, .type1), (81, 25, .type1), (Double(glucoseValue), Double(ageValue), .type3)]
        
        
        let layerSpecifications: [MyExampleModelDataType : (shape: Shape, color: UIColor)] = [
            .type0 : (.cross, UIColor.black),
            .type1 : (.circle, UIColor.blue),
            .type2 : (.square, UIColor.green),
            .type3 : (.triangle, UIColor.red)
        ]
        
        
        let xValues = stride(from: 25, through: 225, by: 50).map {ChartAxisValueInt($0, labelSettings: labelSettings)}
        let yValues = stride(from: 10, through: 90, by: 10).map {ChartAxisValueInt($0, labelSettings: labelSettings)}
        
        let xModel = ChartAxisModel(axisValues: xValues, axisTitleLabel: ChartAxisLabel(text: "Glucose", settings: labelSettings))
        let yModel = ChartAxisModel(axisValues: yValues, axisTitleLabel: ChartAxisLabel(text: "Age", settings: labelSettings.defaultVertical()))
        
        let chartFrame = ExamplesDefaults.chartFrame(view.bounds)
        
        let chartSettings = ExamplesDefaults.chartSettingsWithPanZoom
        
        let coordsSpace = ChartCoordsSpaceLeftBottomSingleAxis(chartSettings: chartSettings, chartFrame: chartFrame, xModel: xModel, yModel: yModel)
        let (xAxisLayer, yAxisLayer, innerFrame) = (coordsSpace.xAxisLayer, coordsSpace.yAxisLayer, coordsSpace.chartInnerFrame)
        
        let scatterLayers = toLayers(models, layerSpecifications: layerSpecifications, xAxis: xAxisLayer, yAxis: yAxisLayer, chartInnerFrame: innerFrame)
        
        let guidelinesLayerSettings = ChartGuideLinesDottedLayerSettings(linesColor: UIColor.black, linesWidth: ExamplesDefaults.guidelinesWidth)
        let guidelinesLayer = ChartGuideLinesDottedLayer(xAxisLayer: xAxisLayer, yAxisLayer: yAxisLayer, settings: guidelinesLayerSettings)
        
        let chart = Chart(
            frame: chartFrame,
            innerFrame: innerFrame,
            settings: chartSettings,
            layers: [
                xAxisLayer,
                yAxisLayer,
                guidelinesLayer
                ] + scatterLayers
        )
        
        graphAndWithInScroll.addSubview(chart.view)
        self.chart = chart
    }
    
    func scoreAnimation(){
        print("Animating chart")
        
        let basicAnimation = CABasicAnimation(keyPath:"strokeEnd")
        basicAnimation.toValue = 1
        basicAnimation.duration = 3
        basicAnimation.fillMode = CAMediaTimingFillMode.forwards
        basicAnimation.isRemovedOnCompletion = false
        shapeLayer.add(basicAnimation, forKey: "Basic")
    }
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
     // Get the new view controller using segue.destination.
     // Pass the selected object to the new view controller.
     }
     */
    
    
    
    fileprivate func toLayers(_ models: [(x: Double, y: Double, type: MyExampleModelDataType)], layerSpecifications: [MyExampleModelDataType : (shape: Shape, color: UIColor)], xAxis: ChartAxisLayer, yAxis: ChartAxisLayer, chartInnerFrame: CGRect) -> [ChartLayer] {
        
        // group chartpoints by type
        var groupedChartPoints: Dictionary<MyExampleModelDataType, [ChartPoint]> = [:]
        for model in models {
            let chartPoint = ChartPoint(x: ChartAxisValueDouble(model.x), y: ChartAxisValueDouble(model.y))
            if groupedChartPoints[model.type] != nil {
                groupedChartPoints[model.type]!.append(chartPoint)
                
            } else {
                groupedChartPoints[model.type] = [chartPoint]
            }
        }
        
        let tapSettings = ChartPointsTapSettings()
        
        // create layer for each group
        let dim: CGFloat = Env.iPad ? 14 : 7
        let size = CGSize(width: dim, height: dim)
        let layers: [ChartLayer] = groupedChartPoints.map {(type, chartPoints) in
            let layerSpecification = layerSpecifications[type]!
            switch layerSpecification.shape {
            case .triangle:
                return ChartPointsScatterTrianglesLayer(xAxis: xAxis.axis, yAxis: yAxis.axis, chartPoints: chartPoints, itemSize: CGSize(width: 20, height: 30), itemFillColor: layerSpecification.color, tapSettings: tapSettings)
            case .square:
                return ChartPointsScatterSquaresLayer(xAxis: xAxis.axis, yAxis: yAxis.axis, chartPoints: chartPoints, itemSize: size, itemFillColor: layerSpecification.color, tapSettings: tapSettings)
            case .circle:
                return ChartPointsScatterCirclesLayer(xAxis: xAxis.axis, yAxis: yAxis.axis, chartPoints: chartPoints, itemSize: size, itemFillColor: layerSpecification.color, tapSettings: tapSettings)
            case .cross:
                return ChartPointsScatterCrossesLayer(xAxis: xAxis.axis, yAxis: yAxis.axis, chartPoints: chartPoints, itemSize: size, itemFillColor: layerSpecification.color, tapSettings: tapSettings)
            }
        }
        
        return layers
    }
    
    

    
    @IBAction func generatePDF(_ sender: Any) {
//        let v1 = UIScrollView(frame: CGRect(x: 0.0,y: 0, width: 100.0, height: 100.0))
//        let v2 = UIView(frame: CGRect(x: 0.0,y: 0, width: 500.0, height: 1200.0))
//        let v3 = UIView(frame: CGRect(x: 0.0,y: 0, width: 100.0, height: 200.0))
//        v1.backgroundColor = .red
//        v1.contentSize = CGSize(width: 100.0, height: 200.0)
//        v2.backgroundColor = .green
//        v3.backgroundColor = .blue
        
        let v2:UIView = graphAndWithInScroll.copyView()
        v2.layer.addSublayer(trackLayer)
        v2.layer.addSublayer(shapeLayer)
        v2.addSubview(chart!.view)
        
      
        
//        let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0]
//        let filePath = "\(documentsPath)/myCoolPDF.pdf"
//        Data.writeToFile(filePath, atomically: true)
        
        
        var docURL = (FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)).last
        docURL = docURL?.appendingPathComponent("sample1.pdf")
//        try OURDATA.write(to: docURL!, options: .atomicWrite)
        
        print("I completed my work, where are you searching ??")

        // outputs as Data
        do {
            let data = try PDFGenerator.generated(by: [v2])
            try data.write(to: docURL!, options: .atomic)
            print("Successfully completed!!!")
            let alert = UIAlertController(title: "File Saved", message: "Your Report Was Generated", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Okay", style: .default, handler: nil))
            self.present(alert,animated: true,completion: nil)
        } catch (let error) {
            print(error)
        }
        // writes to Disk directly.
        do {
            try PDFGenerator.generate([v2], to: docURL!)
        } catch (let error) {
            print(error)
        }
        
    
//       graphAndWithInScroll.addSubview(viewprediction)
//        
//        graphAndWithInScroll.addSubview(generatereport)
        graphAndWithInScroll.layer.addSublayer(trackLayer)
        graphAndWithInScroll.layer.addSublayer(shapeLayer)
            graphAndWithInScroll.addSubview(chart!.view)

    }
    
    
}

extension UIView
{
    func copyView<T: UIView>() -> T {
        return NSKeyedUnarchiver.unarchiveObject(with: NSKeyedArchiver.archivedData(withRootObject: self)) as! T
    }
}
